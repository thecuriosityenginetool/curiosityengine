import { NextRequest, NextResponse } from 'next/server';
import { Document, Paragraph, TextRun, AlignmentType, HeadingLevel, BorderStyle, Packer } from 'docx';

function corsHeaders(origin?: string) {
  return {
    'Access-Control-Allow-Origin': origin || '*',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
  };
}

export async function OPTIONS() {
  return NextResponse.json({}, { status: 200, headers: corsHeaders() });
}

export async function POST(req: NextRequest) {
  try {
    const origin = req.headers.get('origin') || '';
    const body = await req.json();
    const { analysis, profileData, linkedinUrl } = body;

    if (!analysis) {
      return NextResponse.json(
        { error: 'Analysis content is required' },
        { status: 400, headers: corsHeaders(origin) }
      );
    }

    // Parse the analysis text and create Word document
    const paragraphs: Paragraph[] = [];

    // Title
    paragraphs.push(
      new Paragraph({
        text: 'ðŸ¤– Sales Intelligence Report',
        heading: HeadingLevel.TITLE,
        alignment: AlignmentType.CENTER,
        spacing: { after: 200 },
      })
    );

    paragraphs.push(
      new Paragraph({
        text: 'AI-Powered LinkedIn Analysis by Sales Curiosity',
        alignment: AlignmentType.CENTER,
        spacing: { after: 400 },
      })
    );

    // Profile Information
    paragraphs.push(
      new Paragraph({
        text: 'Profile Information',
        heading: HeadingLevel.HEADING_1,
        spacing: { before: 200, after: 200 },
      })
    );

    paragraphs.push(
      new Paragraph({
        children: [
          new TextRun({ text: 'Name: ', bold: true }),
          new TextRun(profileData?.name || 'N/A'),
        ],
        spacing: { after: 100 },
      })
    );

    paragraphs.push(
      new Paragraph({
        children: [
          new TextRun({ text: 'Headline: ', bold: true }),
          new TextRun(profileData?.headline || 'N/A'),
        ],
        spacing: { after: 100 },
      })
    );

    paragraphs.push(
      new Paragraph({
        children: [
          new TextRun({ text: 'Location: ', bold: true }),
          new TextRun(profileData?.location || 'N/A'),
        ],
        spacing: { after: 100 },
      })
    );

    paragraphs.push(
      new Paragraph({
        children: [
          new TextRun({ text: 'LinkedIn: ', bold: true }),
          new TextRun(linkedinUrl || 'N/A'),
        ],
        spacing: { after: 100 },
      })
    );

    paragraphs.push(
      new Paragraph({
        children: [
          new TextRun({ text: 'Generated: ', bold: true }),
          new TextRun(new Date().toLocaleString()),
        ],
        spacing: { after: 400 },
      })
    );

    // Parse analysis content
    const lines = analysis.split('\n');
    lines.forEach((line: string) => {
      if (line.startsWith('**') && line.endsWith('**')) {
        // Heading
        paragraphs.push(
          new Paragraph({
            text: line.replace(/\*\*/g, ''),
            heading: HeadingLevel.HEADING_1,
            spacing: { before: 300, after: 150 },
          })
        );
      } else if (line.startsWith('â€¢ ') || line.startsWith('- ')) {
        // Bullet point
        paragraphs.push(
          new Paragraph({
            text: line.substring(2),
            bullet: { level: 0 },
            spacing: { after: 100 },
          })
        );
      } else if (line.trim() === '---') {
        // Divider (empty paragraph with spacing)
        paragraphs.push(
          new Paragraph({
            text: '',
            spacing: { before: 200, after: 200 },
            border: {
              bottom: {
                color: 'auto',
                space: 1,
                style: BorderStyle.SINGLE,
                size: 6,
              },
            },
          })
        );
      } else if (line.trim()) {
        // Regular paragraph
        paragraphs.push(
          new Paragraph({
            text: line,
            spacing: { after: 120 },
          })
        );
      }
    });

    // Footer
    paragraphs.push(
      new Paragraph({
        text: `Generated by Sales Curiosity Extension â€¢ ${new Date().toLocaleDateString()}`,
        alignment: AlignmentType.CENTER,
        spacing: { before: 400 },
      })
    );

    // Create document
    const doc = new Document({
      sections: [
        {
          properties: {},
          children: paragraphs,
        },
      ],
    });

    // Generate buffer
    const buffer = await Packer.toBuffer(doc);
    const base64 = buffer.toString('base64');

    return NextResponse.json(
      { ok: true, docxBase64: base64 },
      { headers: corsHeaders(origin) }
    );
  } catch (err) {
    console.error('DOCX generation error:', err);
    return NextResponse.json(
      { error: 'Failed to generate DOCX', details: String(err) },
      { status: 500, headers: corsHeaders() }
    );
  }
}

